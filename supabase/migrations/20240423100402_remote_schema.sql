
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "vector" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."create_email_after_confirm"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$BEGIN
    IF old.email_confirmed_at is null and NEW.email_confirmed_at IS NOT NULL THEN
        -- Insert into public.users
        INSERT INTO public.email_list (id,email)
        VALUES (
            old.id,
            old.email
        );
    END IF;
    RETURN old;
END;$$;

ALTER FUNCTION "public"."create_email_after_confirm"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."create_images"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
INSERT INTO public.images (id,object_id,created_by,path)
    VALUES (
      (select new.path_tokens[2]::uuid),
      NEW.id,
      New.owner,
      new.path_tokens[3]
    );
RETURN new;
end;$$;

ALTER FUNCTION "public"."create_images"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."get_email_chart_data"() RETURNS TABLE("truncated_date" "date", "count" bigint)
    LANGUAGE "plpgsql"
    SET "search_path" TO 'public'
    AS $$
BEGIN
    RETURN QUERY
    SELECT DATE_TRUNC('day', created_at)::date AS truncated_date,
           COUNT(*)
    FROM email_list
    WHERE EXTRACT(YEAR FROM created_at) = EXTRACT(YEAR FROM CURRENT_DATE)
      AND EXTRACT(MONTH FROM created_at) = EXTRACT(MONTH FROM CURRENT_DATE)
    GROUP BY truncated_date
    ORDER BY truncated_date;
END;
$$;

ALTER FUNCTION "public"."get_email_chart_data"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."is_admin"() RETURNS boolean
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
  return ((select raw_user_meta_data->>'role' from auth.users where id=auth.uid()) = 'admin');
end;$$;

ALTER FUNCTION "public"."is_admin"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."email_list" (
    "id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "email" "text" NOT NULL,
    "index" bigint NOT NULL
);

ALTER TABLE "public"."email_list" OWNER TO "postgres";

ALTER TABLE "public"."email_list" ALTER COLUMN "index" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."email_list_index_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."email_list"
    ADD CONSTRAINT "email_list_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."email_list"
    ADD CONSTRAINT "public_email_list_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

CREATE POLICY "Enable read access if admin" ON "public"."email_list" FOR SELECT TO "authenticated" USING ("public"."is_admin"());

ALTER TABLE "public"."email_list" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."create_email_after_confirm"() TO "anon";
GRANT ALL ON FUNCTION "public"."create_email_after_confirm"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."create_email_after_confirm"() TO "service_role";

GRANT ALL ON FUNCTION "public"."create_images"() TO "anon";
GRANT ALL ON FUNCTION "public"."create_images"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."create_images"() TO "service_role";

GRANT ALL ON FUNCTION "public"."get_email_chart_data"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_email_chart_data"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_email_chart_data"() TO "service_role";

GRANT ALL ON FUNCTION "public"."is_admin"() TO "anon";
GRANT ALL ON FUNCTION "public"."is_admin"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."is_admin"() TO "service_role";

GRANT ALL ON TABLE "public"."email_list" TO "anon";
GRANT ALL ON TABLE "public"."email_list" TO "authenticated";
GRANT ALL ON TABLE "public"."email_list" TO "service_role";

GRANT ALL ON SEQUENCE "public"."email_list_index_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."email_list_index_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."email_list_index_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" REVOKE ALL ON FUNCTIONS  FROM PUBLIC;

RESET ALL;
